package Views;
import Controllers.LivroController;
import Models.Livro;
import Models.Usuario;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.TableModelEvent;

public class telaExibirLivrosAdmin extends javax.swing.JFrame {
    private final Usuario usuario;
    
    public telaExibirLivrosAdmin(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        atualizarTabelaLivros(); 
        mostrarBoasVindas();
        
        jTable1.getModel().addTableModelListener((TableModelEvent e) -> {
            calcularValorTotal();
        });
    }
    
    private void mostrarBoasVindas() {
        JOptionPane.showMessageDialog(this, "Bem-vindo, " + usuario.getNome() + "!");
    }
    
    public void atualizarTabelaLivros() {
        List<Livro> livros = LivroController.getLivros();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        model.setRowCount(0);

        for (Livro livro : livros) {
            model.addRow(new Object[]{
                livro.getId(),
                livro.getTitulo(),
                livro.getAutor(),
                livro.getValor(),
                livro.getStatusTransacao(),
                false
            });
        }
    }

    
    // Método para calcular o valor total dos livros selecionados
    private void calcularValorTotal() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        double valorTotal = 0.0;

        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean isSelected = (Boolean) model.getValueAt(i, 5); // Índice do checkbox
            if (isSelected != null && isSelected) {
                Double valorLivro = (Double) model.getValueAt(i, 3); // Índice da coluna Valor
                valorTotal += valorLivro;
            }
        }

        // Atualiza o valor total no campo de texto
        jTextFieldValorTotal.setText(String.format("%.2f", valorTotal));
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFieldBuscar = new javax.swing.JTextField();
        btnLimpar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnCadastrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jTextFieldValorTotal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnVender = new javax.swing.JButton();
        btnAlugar = new javax.swing.JButton();
        btnHistorico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tela Principal");

        txtFieldBuscar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFieldBuscar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtFieldBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldBuscarActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(204, 204, 204));
        btnLimpar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Título", "Autor", "Valor", "Status", "Ações"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jTable1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Livros");

        btnEditar.setBackground(new java.awt.Color(245, 214, 103));
        btnEditar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(232, 39, 39));
        btnExcluir.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnCadastrar.setBackground(new java.awt.Color(204, 255, 204));
        btnCadastrar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel2.setText("Nome do Livro:");

        btnBuscar.setBackground(new java.awt.Color(204, 204, 204));
        btnBuscar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jTextFieldValorTotal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextFieldValorTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel3.setText("Valor total:");

        btnVender.setBackground(new java.awt.Color(84, 203, 103));
        btnVender.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnVender.setText("Vender");
        btnVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVenderActionPerformed(evt);
            }
        });

        btnAlugar.setBackground(new java.awt.Color(102, 153, 255));
        btnAlugar.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnAlugar.setText("Alugar");
        btnAlugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlugarActionPerformed(evt);
            }
        });

        btnHistorico.setBackground(new java.awt.Color(204, 204, 204));
        btnHistorico.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnHistorico.setText("Histórico");
        btnHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoricoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(3, 3, 3)
                            .addComponent(txtFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addGap(246, 246, 246)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnHistorico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCadastrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExcluir)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(384, 384, 384)
                                .addComponent(btnAlugar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVender, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnLimpar)
                    .addComponent(btnBuscar)
                    .addComponent(txtFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnExcluir)
                    .addComponent(btnCadastrar)
                    .addComponent(jTextFieldValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btnHistorico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVender)
                    .addComponent(btnAlugar))
                .addGap(28, 28, 28))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable1CaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1CaretPositionChanged

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        telaCadastroLivro telaCadastro = new telaCadastroLivro(this.usuario, this);
        telaCadastro.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void txtFieldBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldBuscarActionPerformed
        btnBuscarActionPerformed(evt);
    }//GEN-LAST:event_txtFieldBuscarActionPerformed

    private void atualizarTabelaLivrosComFiltro(String filtro) {
        List<Livro> livros = LivroController.getLivros();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // Limpa a tabela antes de adicionar novos dados
        model.setRowCount(0);

        // Aplica o filtro e adiciona os livros filtrados à tabela
        for (Livro livro : livros) {
            if (livro.getTitulo().toLowerCase().contains(filtro.toLowerCase()) ||
                livro.getAutor().toLowerCase().contains(filtro.toLowerCase())) {

                model.addRow(new Object[]{
                    livro.getId(),
                    livro.getTitulo(),
                    livro.getAutor(),
                    livro.getValor(),
                    livro.isDisponivel() ? "Disponível" : "Alugado",
                    false // Checkbox para seleção
                });
            }
        }

        // Se nenhum livro for encontrado, exibe uma mensagem
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhum livro encontrado com o termo: " + filtro);
        }
    }
    
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        txtFieldBuscar.setText("");
        atualizarTabelaLivros();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String textoBusca = txtFieldBuscar.getText().trim(); // Obtém o texto do campo de busca

        if (textoBusca.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira um termo de busca.");
            return;
        }

        // Chama a função que filtra os livros e atualiza a tabela
        atualizarTabelaLivrosComFiltro(textoBusca);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        boolean livroRemovido = false;

        // Percorre as linhas da tabela para verificar quais estão selecionadas
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            Boolean selecionado = (Boolean) model.getValueAt(i, 5); // Índice da coluna "Ações"
            if (selecionado != null && selecionado) {
                int idLivro = (Integer) model.getValueAt(i, 0); // Obtém o ID do livro
                LivroController.removerLivroPorID(idLivro); // Remove o livro pelo ID
                model.removeRow(i); // Remove a linha da tabela
                livroRemovido = true;
            }
        }

        if (livroRemovido) {
            JOptionPane.showMessageDialog(this, "Livro(s) removido(s) com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um livro para remover.");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int linhaSelecionada = jTable1.getSelectedRow();
        if (linhaSelecionada != -1) {
            int idLivro = (Integer) jTable1.getValueAt(linhaSelecionada, 0);
            telaAtualizarLivro tela = new telaAtualizarLivro(idLivro, usuario, this); // Passa 'this' como referência
            tela.setVisible(true);
            this.setVisible(false); // Oculta a tela atual
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um livro para editar.");
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private List<Integer> getIdsLivrosSelecionados() {
        int[] linhasSelecionadas = jTable1.getSelectedRows();
        List<Integer> idsLivros = new ArrayList<>();

        for (int linha : linhasSelecionadas) {
            idsLivros.add((int) jTable1.getValueAt(linha, 0)); // Coluna 0 deve ser o ID
        }

        if (idsLivros.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione pelo menos um livro.");
        } else if (idsLivros.size() > 1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione apenas um livro de cada vez para alugar ou vender.");
            idsLivros.clear(); // Limpa a lista para evitar operações com múltiplos itens
        }

        return idsLivros;
    }
    
    private void btnVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVenderActionPerformed
        List<Integer> idsLivros = getIdsLivrosSelecionados();

        // Verifica se mais de um livro está selecionado
        if (idsLivros.size() > 1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione apenas um livro para vender de cada vez.");
            return;
        }

        // Executa a venda para um único livro selecionado
        if (!idsLivros.isEmpty()) {
            int idLivro = idsLivros.get(0);
            String nomeUsuario = usuario.getNome();
            LivroController.venderLivro(idLivro, nomeUsuario);
            JOptionPane.showMessageDialog(this, "Livro vendido com sucesso!");
            atualizarTabelaLivros(); // Atualiza a tabela para mostrar o status atualizado
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um livro para vender.");
        }
    }//GEN-LAST:event_btnVenderActionPerformed

    private void btnAlugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlugarActionPerformed
        List<Integer> idsLivros = getIdsLivrosSelecionados();

        // Verifica se mais de um livro está selecionado
        if (idsLivros.size() > 1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione apenas um livro para alugar de cada vez.");
            return;
        }

        // Executa o aluguel para um único livro selecionado
        if (!idsLivros.isEmpty()) {
            int idLivro = idsLivros.get(0);
            String nomeUsuario = usuario.getNome();
            LivroController.alugarLivro(idLivro, nomeUsuario);
            JOptionPane.showMessageDialog(this, "Livro alugado com sucesso!");
            atualizarTabelaLivros(); // Atualiza a tabela para mostrar o status atualizado
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um livro para alugar.");
        }
    }//GEN-LAST:event_btnAlugarActionPerformed

    private void btnHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoricoActionPerformed
        int linhaSelecionada = jTable1.getSelectedRow();
        if (linhaSelecionada != -1) {
            int idLivro = (Integer) jTable1.getValueAt(linhaSelecionada, 0);
            String historico = LivroController.getHistoricoTransacoes(idLivro);
            JOptionPane.showMessageDialog(this, historico, "Histórico de Transações", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um livro para ver o histórico.");
        }
    }//GEN-LAST:event_btnHistoricoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlugar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnHistorico;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnVender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldValorTotal;
    private javax.swing.JTextField txtFieldBuscar;
    // End of variables declaration//GEN-END:variables
}
